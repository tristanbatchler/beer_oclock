// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const addContact = `-- name: AddContact :one
INSERT INTO contacts (name, email) 
VALUES (?, ?)
RETURNING id, name, email
`

type AddContactParams struct {
	Name  string
	Email string
}

func (q *Queries) AddContact(ctx context.Context, arg AddContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, addContact, arg.Name, arg.Email)
	var i Contact
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const countContacts = `-- name: CountContacts :one
SELECT COUNT(*)
FROM contacts
`

func (q *Queries) CountContacts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countContacts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteContact = `-- name: DeleteContact :one
DELETE FROM contacts
WHERE id = ?
RETURNING id, name, email
`

func (q *Queries) DeleteContact(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRowContext(ctx, deleteContact, id)
	var i Contact
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const getContactById = `-- name: GetContactById :one
SELECT id, name, email 
FROM contacts
WHERE id = ?
`

func (q *Queries) GetContactById(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContactById, id)
	var i Contact
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const getContacts = `-- name: GetContacts :many
SELECT id, name, email
FROM contacts
`

func (q *Queries) GetContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
